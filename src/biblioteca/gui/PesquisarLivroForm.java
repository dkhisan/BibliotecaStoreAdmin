/*
 * Copyright (C) 2018 hisan
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package biblioteca.gui;

import biblioteca.dao.LivroDAO;
import biblioteca.dao.exceptions.LivroNaoEncontradoException;
import biblioteca.entity.Livro;
import biblioteca.gui.exceptions.CampoObrigatorioVazioException;
import biblioteca.util.BibliotecaStoreUtil;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.SessionFactory;

public class PesquisarLivroForm extends javax.swing.JFrame {
    
    private InformacaoLivroForm infoLivro = null;
    private List<Livro> livros;

    public PesquisarLivroForm() {
        livros = new ArrayList<>();
        initComponents();
        reOpen();
    }
    
    public void reOpen() {
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    public static Livro buscarById(Integer id) throws LivroNaoEncontradoException {
        SessionFactory factory = null;
        LivroDAO dao = null;
        Livro livro = null;
        
        factory = BibliotecaStoreUtil.getSessionFactory();
        dao = new LivroDAO(factory);
        
        try {
            livro = dao.findLivro(id);
            return livro;
        } catch (LivroNaoEncontradoException e) {
            throw(e);
        }
    }
    
    private void buscarByTitulo() throws CampoObrigatorioVazioException, LivroNaoEncontradoException {
        SessionFactory factory = null;
        LivroDAO dao = null;
        List livroList = null;
        String tituloBusca = null;
        
        if (txTituloBusca.getText().trim() == null || txTituloBusca.getText().trim().equals("")) {
            throw new CampoObrigatorioVazioException("O campo título deve ser preenchido.");
        }
        
        factory = BibliotecaStoreUtil.getSessionFactory();
        dao = new LivroDAO(factory);
        tituloBusca = txTituloBusca.getText().trim();
        
        try {
            livroList = dao.findLivros(tituloBusca);
            
            if (livroList != null) {
                livros.addAll(livroList);
                
                DefaultTableModel table = (DefaultTableModel) tbLivros.getModel();
                table.getDataVector().removeAllElements();
                table.fireTableDataChanged();
                
                livros.forEach(l -> {
                    Object[] col = new Object[4];
                    
                    col[0] = l.getId();
                    col[1] = l.getTitulo();
                    col[2] = l.getAutor();
                    col[3] = l.getLancamento();
                    
                    table.addRow(col);
                });
            }
        } catch (LivroNaoEncontradoException e) {
            throw(e);
        }
    }
    
    private void buscarTodos() throws LivroNaoEncontradoException {
        SessionFactory factory = null;
        LivroDAO dao = null;
        List livroList = null;
        
        factory = BibliotecaStoreUtil.getSessionFactory();
        dao = new LivroDAO(factory);
        
        try {
            livroList = dao.findLivros();
            
            if (livroList != null) {
                livros.addAll(livroList);
                
                DefaultTableModel table = (DefaultTableModel) tbLivros.getModel();
                table.getDataVector().removeAllElements();
                table.fireTableDataChanged();
                
                livros.forEach(l -> {
                    Object[] col = new Object[4];
                    
                    col[0] = l.getId();
                    col[1] = l.getTitulo();
                    col[2] = l.getAutor();
                    col[3] = l.getLancamento();
                    
                    table.addRow(col);
                });
            }
        } catch (LivroNaoEncontradoException e) {
            throw(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnBuscaHeader = new javax.swing.JPanel();
        pnBotaoGuia = new javax.swing.JPanel();
        btnVoltar = new javax.swing.JButton();
        pnBuscaComponents = new javax.swing.JPanel();
        lbIdLivro = new javax.swing.JLabel();
        txIdBusca = new javax.swing.JTextField();
        lbTituloLivro = new javax.swing.JLabel();
        txTituloBusca = new javax.swing.JTextField();
        btnBuscaId = new javax.swing.JButton();
        btnBuscaTitulo = new javax.swing.JButton();
        btnMostrarTodos = new javax.swing.JButton();
        pnListaLivro = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbLivros = new javax.swing.JTable();
        pnEsq = new javax.swing.JPanel();
        pnDir = new javax.swing.JPanel();
        pnVisualizaComponents = new javax.swing.JPanel();
        btnVisualiarLivro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pesquisar livros");
        setMinimumSize(new java.awt.Dimension(520, 420));
        setPreferredSize(new java.awt.Dimension(520, 420));
        setResizable(false);
        setSize(new java.awt.Dimension(520, 420));
        getContentPane().setLayout(new java.awt.BorderLayout(10, 10));

        pnBuscaHeader.setLayout(new java.awt.BorderLayout(5, 5));

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });
        pnBotaoGuia.add(btnVoltar);

        pnBuscaHeader.add(pnBotaoGuia, java.awt.BorderLayout.LINE_START);

        java.awt.GridBagLayout jPanel4Layout = new java.awt.GridBagLayout();
        jPanel4Layout.columnWidths = new int[] {0, 5, 0, 5, 0};
        jPanel4Layout.rowHeights = new int[] {0, 5, 0, 5, 0};
        pnBuscaComponents.setLayout(jPanel4Layout);

        lbIdLivro.setText("Código");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnBuscaComponents.add(lbIdLivro, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnBuscaComponents.add(txIdBusca, gridBagConstraints);

        lbTituloLivro.setText("Título");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        pnBuscaComponents.add(lbTituloLivro, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnBuscaComponents.add(txTituloBusca, gridBagConstraints);

        btnBuscaId.setText("Pesquisar");
        btnBuscaId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        pnBuscaComponents.add(btnBuscaId, gridBagConstraints);

        btnBuscaTitulo.setText("Pesquisar");
        btnBuscaTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscaTituloActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        pnBuscaComponents.add(btnBuscaTitulo, gridBagConstraints);

        btnMostrarTodos.setText("Pesquisar todos os registros");
        btnMostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnBuscaComponents.add(btnMostrarTodos, gridBagConstraints);

        pnBuscaHeader.add(pnBuscaComponents, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnBuscaHeader, java.awt.BorderLayout.PAGE_START);

        pnListaLivro.setLayout(new java.awt.BorderLayout());

        tbLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Título", "Autor", "Ano"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbLivros.setRowHeight(22);
        tbLivros.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tbLivros);
        tbLivros.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tbLivros.getColumnModel().getColumnCount() > 0) {
            tbLivros.getColumnModel().getColumn(0).setResizable(false);
            tbLivros.getColumnModel().getColumn(1).setResizable(false);
            tbLivros.getColumnModel().getColumn(2).setResizable(false);
            tbLivros.getColumnModel().getColumn(3).setResizable(false);
        }

        pnListaLivro.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnListaLivro, java.awt.BorderLayout.CENTER);
        getContentPane().add(pnEsq, java.awt.BorderLayout.LINE_START);
        getContentPane().add(pnDir, java.awt.BorderLayout.LINE_END);

        btnVisualiarLivro.setText("Visualizar");
        btnVisualiarLivro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualiarLivroActionPerformed(evt);
            }
        });
        pnVisualizaComponents.add(btnVisualiarLivro);

        getContentPane().add(pnVisualizaComponents, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscaIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaIdActionPerformed
        if (!livros.isEmpty()) {
            livros.clear();
        }
        Livro livro = null;
        int idBusca = 0;
        
        if (txIdBusca.getText().trim() != null || !txIdBusca.getText().trim().equals("")) {
            try {
                idBusca = Integer.parseInt(txIdBusca.getText().trim());
                livro = buscarById(idBusca);
                
                if (livro != null) {
                    DefaultTableModel table = (DefaultTableModel) tbLivros.getModel();
                    table.getDataVector().removeAllElements();
                    table.fireTableDataChanged();
                    
                    livros.add(livro);
                    
                    Object[] data = {
                        livro.getId(),
                        livro.getTitulo(),
                        livro.getAutor(),
                        livro.getLancamento()
                    };
                    
                    table.addRow(data);
                }
            } catch (NumberFormatException | LivroNaoEncontradoException e) {
                JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "O campo id deve ser preenchido.", "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscaIdActionPerformed

    private void btnBuscaTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscaTituloActionPerformed
        if (!livros.isEmpty()) {
            livros.clear();
        }
        
        try {
            buscarByTitulo();
        } catch (CampoObrigatorioVazioException | LivroNaoEncontradoException e) {
            JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscaTituloActionPerformed

    private void btnVisualiarLivroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualiarLivroActionPerformed
        int selected = tbLivros.getSelectedRow();
        
        if (selected != -1) {
            if (infoLivro == null) {
                infoLivro = new InformacaoLivroForm(livros.get(selected));
            } else {
                infoLivro.reOpen(livros.get(selected));
            }
        }
    }//GEN-LAST:event_btnVisualiarLivroActionPerformed

    private void btnMostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodosActionPerformed
       if (!livros.isEmpty()) {
            livros.clear();
        }
       try {
           buscarTodos();
       } catch (LivroNaoEncontradoException e) {
           JOptionPane.showMessageDialog(this, e.getLocalizedMessage(), "Atenção", JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_btnMostrarTodosActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscaId;
    private javax.swing.JButton btnBuscaTitulo;
    private javax.swing.JButton btnMostrarTodos;
    private javax.swing.JButton btnVisualiarLivro;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbIdLivro;
    private javax.swing.JLabel lbTituloLivro;
    private javax.swing.JPanel pnBotaoGuia;
    private javax.swing.JPanel pnBuscaComponents;
    private javax.swing.JPanel pnBuscaHeader;
    private javax.swing.JPanel pnDir;
    private javax.swing.JPanel pnEsq;
    private javax.swing.JPanel pnListaLivro;
    private javax.swing.JPanel pnVisualizaComponents;
    private javax.swing.JTable tbLivros;
    private javax.swing.JTextField txIdBusca;
    private javax.swing.JTextField txTituloBusca;
    // End of variables declaration//GEN-END:variables
}
